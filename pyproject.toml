[tool.poetry]
name = "eo-basic-example"
version = "0.0.1-dev"
description = "Quick examples working with satellite data."
authors = []
readme = "README.md"
repository = "https://github.com.mcas.ms/jap546/eo-basic-example"
classifiers = [
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [{ include = "download" }]
exclude = [
    ".github",
    ".flake8",
    ".pylintrc",
    "mypy.ini",
    ".coveragerc",
    "Makefile",
    "scripts",
    "tests",
]

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
requests = "^2.32.2"
pip = "^23.3"
cligj = { version = "^0.7.2", python = ">=3.10,<4" }
geojson = { version = "^3.0.0", python = ">=3.9,<=3.11" }
ipykernel = "^6.20.2"
pydantic = "^2.5.2"
jenkspy = "^0.4.0"
python-slugify = "^8.0.1"
pydantic-core = "^2.14.5"
shapely = "^2.0.3"
geopandas = ">=1"
urllib3 = "^2.3.0"
validators = "^0.34.0"
numpy = "^2.2.3"
pystac-client = "^0.8.6"
pyarrow = "^19.0.1"
contextily = "^1.6.2"
rioxarray = "^0.18.2"
dask = { version = ">=2023.1.1", extras = ["distributed"] }
dask-gateway = "^2024.1.0"
planetary-computer = "^1.0.0"
stackstac = { extras = ["viz"], version = "^0.5.1" }


[tool.poetry.group.dev.dependencies]
# runner
nox = "^2022.11.21"
pre-commit = "^3.5.0"
# format
black = "^24.4.2"
isort = "^5.13.2"
# lint
ruff = "^0.2.1"
# typecheck
mypy = "^1.11.0"
pandas-stubs = "^2.2.2.240603"
typing-extensions = "^4.5.0"
types-python-slugify = "^8.0.0.2"
types-requests = "^2.28.11.13"
# test
pytest = "^7.2.1"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
coverage = "^6.3.2"

[tool.poetry.plugins."console_scripts"]
download = "main:download_missing_files"


[tool.mypy]
mypy_path = ["download"]
strict = true
# explicit_package_bases = true
namespace_packages = false
ignore_missing_imports = true

[tool.pytest.ini_options]
pythonpath = ["download"]
addopts = "--cov=download"
testpaths = ["tests/download"]
filterwarnings = "ignore::pytest.PytestDeprecationWarning"

[tool.coverage.paths]
source = ["download"]

[tool.coverage.run]
branch = true
source = ["download"]

[tool.coverage.report]
show_missing = true
# appl_under = 100
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
lint.select = [
    "A",   # flake8-builtins (redefinition of bultins)
    "ANN", # flake8-annotations (type annotations are everywhere)
    "ARG", # flake8-unused-arguments (unused argument in function/method/class/lambda)
    "B",   # flake8-bugbear (bugs & design problems)
    "B9",  # flake8-bugbear strict (bugs & design problems)
    "BLE", # flake8-blind-except (no "except:" or "except Exception:")
    # "COM", # flake8-commas (force trailing commas) -> unelegant
    "C4",  # flake8-comprehensions (better list/set/dict comprehensions)
    "C90", # McCabe (code complexity)
    "D",   # pydocstyle (documentation style)
    "DJ",  # flake8-django (practices on Django)
    "DTZ", # flake8-datetimez (usage of unsafe naive datetime class)
    "E",   # pycodestyle (violation of PEP-8)
    "EM",  # flake8-errmsg (format error messages)
    "EXE", # flake8-executable (executable permissions and shebangs)
    "ERA", # eradicate (no commented-out code)
    "F",   # pyflakes (invalid Python code)
    "FBT", # flake8-boolean-trap (misusage of booleans in function declaration & calls)
    "G",   # flake8-logging-format (logging format strings)
    "I",   # isort (import order)
    "ICN", # flake8-import-conventions (how certain packages should be imported or aliased)
    # "INP", # flake8-no-pep420 (ban PEP-420 implicit namespace packages) -> long live implicit namespace packages!
    "INT", # flake8-gettext (f-string resolved before function calls)
    "ISC", # flake8-implicit-str-concat (string literal concatenation)
    "N",   # pep8-naming (naming conventions)
    "NPY", # NumPy-specific rules (e.g. deprecated-type-alias and legacy-random)
    "PD",  # pandas-vet (pandas code)
    "PIE", # flake8-pie (miscellaneous lints)
    "PGH", # pygrep-hooks (miscellaneous lints, e.g. "use specific rule codes when using noqa")
    "PL",  # Pylint (static code analyser)
    "PT",  # flake8-pytest-style (style issues or inconsistencies with pytest-based tests)
    "PTH", # flake8-use-pathlib (use of functions that can be replaced by pathlib module)
    "PYI", # flake8-pyi (provide specializations for type hinting stub files)
    "Q0",  # flake8-quotes (avoid escaping quotes)
    "RSE", # flake8-raise (improvements for raise statements)
    "RET", # flake8-return (check return values)
    "RUF", # ruff-specific rules
    "S",   # flake8-bandit (security)
    "SIM", # flake8-simplify (tips to simplify the code)
    "SLF", # flake8-self (private member access)
    "T10", # flake8-debugger
    "T20", # flake8-print (no print nor pprint)
    "TCH", # flake8-type-checking (move import only intended for type-checking in "if TYPE_CHECKING" blocs)
    "TID", # flake8-tidy-imports (ordonated imports)
    "TRY", # tryceratops (exception handling AntiPatterns)
    "UP",  # pyupgrade (upgrate syntax for newer versions of Python)
    "YTT", # flake8-2020 (misuse of sys.version and sys.version_info)
    "W",   # pycodestyle (violation of PEP-8)
]
lint.ignore = [
    "ANN101",  # missing type annotation for self, but hinting self all the time is useless
    "ANN102",  # missing type annotation for cls but hinting cls all the time is useless
    "ANN401",  # disallows Any, but some elements should be Any when they are external
    "B024",    # forces abstract classes to have at least one abstract method, but sometimes a class is virtually abstract
    "D100",    # missing docstring in public module
    "D101",    # missing docstring in public class
    "D102",    # missing docstring in public method
    "D103",    # missing docstring in public function
    "D104",    # missing docstring in public package
    "D105",    # docstrings on magic methods, useless docstrings are well known
    "D107",    # missing docstring in __init__
    "DTZ007",  # allow use of datetime.datetime without timezone
    "DTZ011",  # naive datetime is used, but it's OK for the user to use it
    "ERA001",  # commented-out code is OK in some cases
    "E501",    # line size, but bug-bear already set it with a tolerance of 10% (B950)
    "ISC001",
    "PD901",   # allow use of `df` for dataframes
    "PD003",   # allow .isna() and .isnull() for dataframes
    "PD004",   # allow .notna() and .notnull() for dataframes
    "PD010",   # allow use of .pivot_table() for dataframes
    "PD015",   # allow use of .merge() for dataframes
    "PGH003",  # ignore use of specific rule codes when using noqa
    "PLR2004", # allow use of some magic constants
    "T201",    # allow print statements where necessary
    "TCH001",  # ignore import only for type-checking in "if TYPE_CHECKING" blocks
    "TCH002",  # ignore type-checking suggestions, trust the devs
    "UP007",   # ignore or-wise typing for py3.9 support
    "UP035",   # allow use of typing.Callable
]
exclude = ["gunicorn_conf.py", "tests/", "scripts/"]

[tool.ruff.lint.per-file-ignores]
"docs/conf.py" = [
    "A001", # redefine some builtins (like "copyright") is OK in docs
]
"noxfile.py" = [
    "D402", # repeating the name of the function is OK for nox since it's to display it to the user
]
"tests/*" = [
    "ARG",    # some arguments are unused in tests functions but useful (e.g. mocks)
    "S101",   # asserts are OK for tests
    "SLF001", # accessing private members is OK for tests
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["download"]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
